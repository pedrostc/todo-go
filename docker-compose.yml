version: "3.9"
services:
    hello:
        build: ./api
        networks:
            - todo
    post-todo:
        build: ./api/controller/post-controller
        depends_on: 
            rabbitmq:
                condition: service_healthy
        networks:
            - todo
    dao:
        build: ./api/dao
        depends_on: 
            mongo:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        networks:
            - todo
    rabbitmq:
        image: rabbitmq:3-management-alpine
        volumes:
            - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
            - ./rabbitmq/logs:/var/log/rabbitmq/log
        ports:
            - 5672:5672
            - 15672:15672
        healthcheck:
            test: ["CMD", "rabbitmq-diagnostics", "ping"]
            interval: 30s
            timeout: 10s
            retries: 5
        networks:
            - todo
    proxy:
        image: haproxy:2.3-alpine
        depends_on: 
            - hello
            - mongo-express
            - post-todo
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
        ports:
            - 80:80
        networks:
            - todo
    mongo:
        image: mongo
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: example
        volumes: 
            - /c/data/mongo/todo-go:/data/db
        networks:
            - todo
        healthcheck:
            test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
            interval: 30s
            timeout: 10s
            retries: 5        
    mongo-express:
        image: mongo-express
        restart: always
        depends_on: 
            mongo:
                condition: service_healthy
        ports:
            - 8081:8081
        environment:
            ME_CONFIG_MONGODB_ADMINUSERNAME: root
            ME_CONFIG_MONGODB_ADMINPASSWORD: example
            ME_CONFIG_SITE_BASEURL: /admin/mongo
        networks:
            - todo
    # es01:
    #     image: docker.elastic.co/elasticsearch/elasticsearch:7.13.2
    #     container_name: es01
    #     environment:
    #         - node.name=es01
    #         - cluster.name=es-docker-cluster
    #         - cluster.initial_master_nodes=es01
    #         - bootstrap.memory_lock=true
    #         - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    #     ulimits:
    #         memlock:
    #             soft: -1
    #             hard: -1
    #     volumes:
    #         - /c/data/elasticsearch/todo-go:/usr/share/elasticsearch/data
    #     ports:
    #         - 9200:9200
    #     networks:
    #         - elastic
    # kibana:
    #     image: docker.elastic.co/kibana/kibana:7.13.2
    #     environment:
    #         ELASTICSEARCH_HOSTS: http://es01:9200
    #     ports:
    #         - 5601:5601
    #     depends_on: 
    #         - es01
    #     networks:
    #         - elastic
    # filebeat:
    #     image: docker.elastic.co/beats/filebeat:7.13.2
    #     user: root
    #     networks:
    #         - elastic
    #     volumes:
    #         - ./filebeat/filebeat.docker.yml:/usr/share/filebeat/filebeat.yml:ro
    #         - /var/run/docker.sock:/var/run/docker.sock
    #         - /var/lib/docker/containers/:/var/lib/docker/containers/:ro
    #     environment:
    #         - ELASTICSEARCH_HOST=http://es01:9200
    #     # disable strict permission checks
    #     command: ["--strict.perms=false"]
    #     depends_on: 
    #         - es01
    #         - kibana
volumes:
    logvolume01: {}

networks:
    todo:
    elastic: